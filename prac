//q1 Random quicksort

#include <iostream>
#include <vector>
#include <cstdlib> // for rand()
#include <ctime>   // for time()

using namespace std;

// Function to perform randomized quick sort
pair<vector<int>, int> randomized_quick_sort(const vector<int>& arr) {
    if (arr.size() <= 1) {
        return {arr, 0}; // Base case: return the array and 0 comparisons
    }

    // Randomly select a pivot
    int pivot_index = rand() % arr.size();
    int pivot = arr[pivot_index];

    vector<int> less_than_pivot;
    vector<int> equal_to_pivot;
    vector<int> greater_than_pivot;
    
    int comparisons = 0;

    for (const int& element : arr) {
        comparisons++; // Count comparison
        if (element < pivot) {
            less_than_pivot.push_back(element);
        } else if (element > pivot) {
            greater_than_pivot.push_back(element);
        } else {
            equal_to_pivot.push_back(element);
        }
    }

    // Recursively sort the sub-arrays
    pair<vector<int>, int> sorted_less = randomized_quick_sort(less_than_pivot);
    pair<vector<int>, int> sorted_greater = randomized_quick_sort(greater_than_pivot);

    // Combine the sorted sub-arrays and the pivot
    vector<int> sorted_array = sorted_less.first;
    sorted_array.insert(sorted_array.end(), equal_to_pivot.begin(), equal_to_pivot.end());
    sorted_array.insert(sorted_array.end(), sorted_greater.first.begin(), sorted_greater.first.end());

    // Calculate the total number of comparisons
    int total_comparisons = comparisons + sorted_less.second + sorted_greater.second;

    return {sorted_array, total_comparisons};
}

int main() {
    srand(static_cast<unsigned int>(time(0))); // Seed for random number generation

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> array(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; ++i) {
        cin >> array[i];
    }

    pair<vector<int>, int> result = randomized_quick_sort(array);

    cout << "Sorted Array: ";
    for (const int& num : result.first) {
        cout << num << " ";
    }
    cout << endl;
    cout << "Number of Comparisons: " << result.second << endl;

    return 0;
}


//q2Randomized select-sort for shortest number

#include <iostream>
#include <vector>
#include <cstdlib> // for rand()
#include <ctime>   // for time()

using namespace std;

// Function to partition the array around the pivot
int partition(vector<int>& arr, int low, int high, int pivotIndex) {
    int pivotValue = arr[pivotIndex];
    swap(arr[pivotIndex], arr[high]); // Move pivot to end
    int storeIndex = low;

    for (int i = low; i < high; i++) {
        if (arr[i] < pivotValue) {
            swap(arr[storeIndex], arr[i]);
            storeIndex++;
        }
    }
    swap(arr[storeIndex], arr[high]); // Move pivot to its final place
    return storeIndex; // Return the final position of the pivot
}

//q2 Randomized Select function to find the i-th smallest element
int randomized_select(vector<int>& arr, int low, int high, int i) {
    if (low == high) {
        return arr[low]; // If the list contains only one element
    }

    // Select a random pivot index
    int pivotIndex = low + rand() % (high - low + 1);
    pivotIndex = partition(arr, low, high, pivotIndex);

    // The pivot is in its final sorted position
    if (i == pivotIndex) {
        return arr[i]; // Found the i-th smallest element
    } else if (i < pivotIndex) {
        return randomized_select(arr, low, pivotIndex - 1, i); // Search left
    } else {
        return randomized_select(arr, pivotIndex + 1, high, i); // Search right
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0))); // Seed for random number generation

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> array(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; ++i) {
        cin >> array[i];
    }

    int i;
    cout << "Enter the position (1-based) of the smallest element you want to find: ";
    cin >> i;

    // Convert to 0-based index
    i -= 1;

    if (i < 0 || i >= array.size()) {
        cout << "Invalid position. Please enter a value between 1 and " << array.size() << "." << endl;
        return 1;
    }

    int result = randomized_select(array, 0, array.size() - 1, i);
    cout << "The " << i + 1 << "th smallest element is: " << result << endl;

    return 0;
}

\\q3 kruskal algorithm implementation
#include <bits/stdc++.h>
using namespace std;

// DSU data structure: path compression + rank by union
class DSU {
    int* parent;
    int* rank;

public:
    DSU(int n) {
        parent = new int[n];
        rank = new int[n];

        for (int i = 0; i < n; i++) {
            parent[i] = -1;
            rank[i] = 1;
        }
    }

    // Find function
    int find(int i) {
        if (parent[i] == -1)
            return i;

        return parent[i] = find(parent[i]);
    }

    // Union function
    void unite(int x, int y) {
        int s1 = find(x);
        int s2 = find(y);

        if (s1 != s2) {
            if (rank[s1] < rank[s2]) {
                parent[s1] = s2;
            } else if (rank[s1] > rank[s2]) {
                parent[s2] = s1;
            } else {
                parent[s2] = s1;
                rank[s1] += 1;
            }
        }
    }
};

class Graph {
    vector<vector<int>> edgelist;
    int V;

public:
    Graph(int V) { this->V = V; }

    // Function to add edge in a graph
    void addEdge(int x, int y, int w) {
        edgelist.push_back({w, x, y});
    }

    // Function to perform Kruskal's MST
    void kruskals_mst() {
        // Sort all edges
        sort(edgelist.begin(), edgelist.end());

        // Initialize the DSU
        DSU s(V);
        int ans = 0;

        cout << "Following are the edges in the constructed MST:\n";
        for (auto edge : edgelist) {
            int w = edge[0];
            int x = edge[1];
            int y = edge[2];

            // Take this edge in MST if it does not form a cycle
            if (s.find(x) != s.find(y)) {
                s.unite(x, y);
                ans += w;
                cout << x << " -- " << y << " == " << w << endl;
            }
        }
        cout << "Minimum Cost Spanning Tree: " << ans << endl;
    }
};

// Driver code
int main() {
    int V, E;

    // Input number of vertices and edges
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    Graph g(V);

    // Input each edge with its weight
    cout << "Enter the edges (format: u v w) where u and v are vertices (0-based) and w is weight:\n";
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        g.addEdge(u, v, w);
    }

    // Call the Kruskal's MST function
    g.kruskals_mst();

    return 0;
}


\\ q4 bellman ford
#include <iostream>
#include <vector>
#include <climits> // for INT_MAX

using namespace std;

// Edge structure to store information about a graph edge (u -> v with weight w)
struct Edge {
    int u, v, weight;
};

// Function to implement Bellman-Ford algorithm
bool bellmanFord(int vertices, int edges, int source, const vector<Edge>& graph, vector<int>& distances) {
    // Initialize distances from source to all vertices as infinite (INT_MAX)
    distances.assign(vertices, INT_MAX);
    distances[source] = 0;  // Distance from source to itself is always 0

    // Relax all edges (vertices-1) times
    for (int i = 0; i < vertices - 1; i++) {
        for (int j = 0; j < edges; j++) {
            int u = graph[j].u;
            int v = graph[j].v;
            int weight = graph[j].weight;
            
            if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
                distances[v] = distances[u] + weight;
            }
        }
    }

    // Check for negative weight cycles by relaxing edges one more time
    for (int j = 0; j < edges; j++) {
        int u = graph[j].u;
        int v = graph[j].v;
        int weight = graph[j].weight;

        if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
            // Negative weight cycle detected
            return false;
        }
    }

    return true;
}

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    vector<Edge> graph(edges);
    
    cout << "Enter edges (u v weight):" << endl;
    for (int i = 0; i < edges; i++) {
        cin >> graph[i].u >> graph[i].v >> graph[i].weight;
    }

    int source;
    cout << "Enter source vertex: ";
    cin >> source;

    vector<int> distances(vertices);

    // Run Bellman-Ford algorithm
    if (bellmanFord(vertices, edges, source, graph, distances)) {
        cout << "Shortest distances from source " << source << " are:" << endl;
        for (int i = 0; i < vertices; i++) {
            if (distances[i] == INT_MAX) {
                cout << "Vertex " << i << ": No path" << endl;
            } else {
                cout << "Vertex " << i << ": " << distances[i] << endl;
            }
        }
    } else {
        cout << "Graph contains a negative weight cycle!" << endl;
    }

    return 0;
}

\\q5  B tree  implementation

#include <iostream>
using namespace std;

class Node {
    int *keys; // Array of keys
    int t; // Minimum degree
    Node **C; // Array of child pointers
    int n; // Current number of keys
    bool leaf; // Is true when the node is a leaf

public:
    Node(int _t, bool _leaf); // Constructor

    void insertNonFull(int k);
    void splitChild(int i, Node *y);
    void traverse(); // Function to traverse the nodes

    friend class BTree;
};

class BTree {
    Node *root; // Pointer to root node
    int t; // Minimum degree

public:
    BTree(int _t) {
        root = NULL;
        t = _t;
    }

    void traverse() {
        if (root != NULL)
            root->traverse();
    }

    void insert(int k);
};

Node::Node(int t1, bool leaf1) {
    t = t1;
    leaf = leaf1;
    keys = new int[2 * t - 1];
    C = new Node *[2 * t];
    n = 0;
}

// Traverse the nodes in the B-Tree
void Node::traverse() {
    int i;
    for (i = 0; i < n; i++) {
        if (!leaf)
            C[i]->traverse();
        cout << " " << keys[i];
    }
    if (!leaf)
        C[i]->traverse();
}

// Insert a key into the B-Tree
void BTree::insert(int k) {
    if (root == NULL) {
        root = new Node(t, true);
        root->keys[0] = k;
        root->n = 1;
    } else {
        if (root->n == 2 * t - 1) {
            Node *s = new Node(t, false);
            s->C[0] = root;
            s->splitChild(0, root);
            int i = 0;
            if (s->keys[0] < k)
                i++;
            s->C[i]->insertNonFull(k);
            root = s;
        } else
            root->insertNonFull(k);
    }
}

// Insert key in a non-full node
void Node::insertNonFull(int k) {
    int i = n - 1;

    if (leaf) {
        while (i >= 0 && keys[i] > k) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = k;
        n = n + 1;
    } else {
        while (i >= 0 && keys[i] > k)
            i--;

        if (C[i + 1]->n == 2 * t - 1) {
            splitChild(i + 1, C[i + 1]);
            if (keys[i + 1] < k)
                i++;
        }
        C[i + 1]->insertNonFull(k);
    }
}

// Split a full child
void Node::splitChild(int i, Node *y) {
    Node *z = new Node(y->t, y->leaf);
    z->n = t - 1;

    for (int j = 0; j < t - 1; j++)
        z->keys[j] = y->keys[j + t];

    if (!y->leaf) {
        for (int j = 0; j < t; j++)
            z->C[j] = y->C[j + t];
    }

    y->n = t - 1;
    for (int j = n; j >= i + 1; j--)
        C[j + 1] = C[j];

    C[i + 1] = z;

    for (int j = n - 1; j >= i; j--)
        keys[j + 1] = keys[j];

    keys[i] = y->keys[t - 1];
    n = n + 1;
}
int main() {
    int t;
    cout << "Enter the minimum degree of the B-Tree: ";
    cin >> t;
    BTree btree(t);

    int choice, key;
    do {
        cout << "\n1. Insert key\n2. Traverse B-Tree\n3. Exit\nEnter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter the key to insert: ";
                cin >> key;
                btree.insert(key);
                break;
            case 2:
                cout << "B-Tree traversal: ";
                btree.traverse();
                cout << endl;
                break;
            case 3:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice, please try again." << endl;
        }
    } while (choice != 3);
    return 0;
}



\\Q6 implementing treeDs supports insert and search

#include <iostream>
#include <vector>
#include <memory>

using namespace std;

// Definition of a tree node
class TreeNode {
public:
    int data;
    vector<shared_ptr<TreeNode>> children;

    TreeNode(int value) : data(value) {}
};

// Class for the general tree   
class Tree {
public:
    shared_ptr<TreeNode> root;

    Tree(int rootValue) {
        root = make_shared<TreeNode>(rootValue);
    }

    // Function to insert a node
    void insert(int parentValue, int value) {
        auto parentNode = search(root, parentValue);
        if (parentNode) {
            parentNode->children.push_back(make_shared<TreeNode>(value));
            cout << "Inserted " << value << " under parent " << parentValue << endl;
        } else {
            cout << "Parent node " 
            << parentValue << " not found." << endl;
        }
    }

    // Function to search for a node
    bool search(int value) {
        return search(root, value) != nullptr;
    }

private:
    // Helper function to search for a node recursively
    shared_ptr<TreeNode> search(shared_ptr<TreeNode> node, int value) {
        if (node == nullptr) return nullptr;
        if (node->data == value) return node;

        for (auto& child : node->children) {
            auto foundNode = search(child, value);
            if (foundNode) return foundNode;
        }
        return nullptr;
    }
};

// Example usage
int main() {
    int rootValue;
    cout << "Enter root value: ";
    cin >> rootValue;

    Tree tree(rootValue);  // Create a tree with user-defined root value

    int numInserts;
    cout << "Enter number of nodes to insert: ";
    cin >> numInserts;

    for (int i = 0; i < numInserts; ++i) {
        int parentValue, value;
        cout << "Enter parent value and child value (format: parent child): ";
        cin >> parentValue >> value;
        tree.insert(parentValue, value);
    }

    // Searching for nodes
    int searchValue;
    cout << "Enter a value to search: ";
    cin >> searchValue;

    cout << "Searching for node " << searchValue << ": " 
         << (tree.search(searchValue) ? "Found" : "Not Found") << endl;

    return 0;
}

\\ Search Q7 kmp algorithm
#include <iostream>
#include <vector>
using namespace std;

// Function to compute the LPS (Longest Prefix Suffix) array
void computeLPSArray(string pattern, vector<int>& lps) {
    int length = 0;
    int i = 1;
    lps[0] = 0; // LPS for the first character is always 0

    // Build the LPS array
    while (i < pattern.length()) {
        if (pattern[i] == pattern[length]   ) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

//q7 Function to perform KMP search
void KMPSearch(string text, string pattern) {
    int m = pattern.length();
    int n = text.length();

    // Create the LPS array for the pattern
    vector<int> lps(m);
    computeLPSArray(pattern, lps);

    int i = 0; // index for text
    int j = 0; // index for pattern

    // Iterate through the text to search for the pattern
    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == m) {
            // Pattern found at index (i - j)
            cout << "Pattern found at index: " << i - j << endl;
            j = lps[j - 1];
        }

        // Mismatch after j matches
        else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
}

int main() {
    string text, pattern;

    // Input text and pattern from the user
    cout << "Enter the text: ";
    getline(cin, text);

    cout << "Enter the pattern: ";
    getline(cin, pattern);

    // Perform KMP search
    KMPSearch(text, pattern);

    return 0;
}

\\q8 suffix tries 
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

// SuffixTrieNode class represents a single node in the suffix trie
class SuffixTrieNode {
public:
    unordered_map<char, SuffixTrieNode*> children; // Children nodes (unordered to preserve insertion order)
    bool isEndOfWord;                             // Flag to mark the end of a word

    SuffixTrieNode() {
        isEndOfWord = false; // Initially, it's not the end of a word
    }
};

// SuffixTrie class represents the suffix trie
class SuffixTrie {
private:
    SuffixTrieNode* root;  // Root of the suffix trie
    string text;           // The input string for the suffix trie

public:
    // Constructor to initialize the suffix trie
    SuffixTrie(string txt) {
        root = new SuffixTrieNode();
        text = txt;
    }

    // Function to insert a suffix into the trie
    void insertSuffix(const string& suffix) {
        SuffixTrieNode* node = root;
        for (char c : suffix) {
            if (node->children.find(c) == node->children.end()) {
                node->children[c] = new SuffixTrieNode();
            }
            node = node->children[c];
        }
        node->isEndOfWord = true; // Mark the end of this suffix
    }

    // Function to build the suffix trie by inserting all suffixes
    void build() {
        for (int i = 0; i < text.length(); ++i) {
            insertSuffix(text.substr(i));
        }
    }

    // Function to collect all suffixes stored in the trie
    void collectSuffixes(SuffixTrieNode* node, string current, vector<string>& suffixes) {
        if (node->isEndOfWord) {
            suffixes.push_back(current); // Add the suffix to the list
        }

        for (auto& child : node->children) {
            collectSuffixes(child.second, current + child.first, suffixes);
        }
    }

    // Function to print all suffixes in the trie in the input order
    void printSuffixes() {
        vector<string> suffixes;
        for (int i = 0; i < text.length(); ++i) {
            suffixes.push_back(text.substr(i));
        }

        cout << "All suffixes in the suffix trie:\n";
        for (const string& suffix : suffixes) {
            cout << suffix << endl;
        }
    }

    // Destructor to clean up dynamically allocated memory
    ~SuffixTrie() {
        deleteTrie(root);
    }

private:
    // Helper function to delete the trie
    void deleteTrie(SuffixTrieNode* node) {
        for (auto& child : node->children) {
            deleteTrie(child.second);
        }
        delete node;
    }
};

int main() {
    // Accept user input for the string
    string txt;
    cout << "Enter a word: ";
    cin >> txt;

    // Create the suffix trie for the input string
    SuffixTrie trie(txt);

    // Build the suffix trie
    trie.build();

    // Print the list of suffixes
    trie.printSuffixes();

    return 0;
}

